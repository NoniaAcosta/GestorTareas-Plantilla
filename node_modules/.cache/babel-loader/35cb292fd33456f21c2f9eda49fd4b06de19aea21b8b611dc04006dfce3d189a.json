{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"AddTask\",\n  data() {\n    return {\n      newTask: \"\",\n      // Campo de entrada para la nueva tarea\n      tasks: [] // Lista de tareas locales\n    };\n  },\n  methods: {\n    addTask() {\n      if (this.newTask.trim() === \"\") return;\n      const newTask = {\n        todo: this.newTask,\n        completed: false,\n        id: Date.now()\n      };\n\n      // Añadir la nueva tarea al inicio de la lista\n      this.tasks.unshift(newTask);\n      this.newTask = \"\"; // Limpiar el campo de entrada después de agregar\n    },\n    // Elimina una tarea específica de la lista\n    deleteTask(task) {\n      this.tasks = this.tasks.filter(t => t.id !== task.id);\n    },\n    // Cambia el estado de la tarea entre completada y no completada\n    toggleTaskCompletion(task) {\n      task.completed = !task.completed;\n    },\n    fetchTasks() {\n      // Aquí deberían realizar la solicitud a la API usando axios o fetch.\n      // La URL que usaremos es: https://dummyjson.com/todos\n\n      // Sugerencia: Intentar implementarlo con axios o fetch\n\n      axios.get(\"https://dummyjson.com/todos\").then(response => {\n        // Asigna la lista de tareas al estado\n        this.tasks = response.data.todos;\n      }).catch(error => {\n        console.error(\"Error al obtener las tareas:\", error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchTasks();\n  }\n};","map":{"version":3,"names":["axios","name","data","newTask","tasks","methods","addTask","trim","todo","completed","id","Date","now","unshift","deleteTask","task","filter","t","toggleTaskCompletion","fetchTasks","get","then","response","todos","catch","error","console","mounted"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\r\n    <!-- Esta seccion es una combinación de las dos vistas anteriores -->\r\n    <div class=\"add-task-container\">\r\n        <h1>Lista de Tareas Combinada: Añadir Tarea</h1>\r\n        <div class=\"input-group\">\r\n            <input v-model=\"newTask\" @keyup.enter=\"addTask\" placeholder=\"Añadir nueva tarea\" class=\"task-input\" />\r\n            <button @click=\"addTask\" class=\"add-button btn btn-primary\">Añadir</button>\r\n            <div v-if=\"tasks.length > 0\">\r\n                <div class=\"row justify-content-center\">\r\n                    <div v-for=\"task in tasks\" :key=\"task.id\" class=\"task-item\">\r\n                        <div class=\"col-sm-12 border rounded p-25\">\r\n                            <h5 :style=\"{ textDecoration: task.completed ? 'line-through' : 'none' }\">{{ task.todo }}\r\n                            </h5>\r\n                            <span class=\"badge\" :class=\"task.completed ? 'bg-primary' : 'bg-secondary'\">\r\n                                {{ task.completed ? 'Completada' : 'Pendiente' }}\r\n                            </span>\r\n                            <div class=\"d-flex justify-content-center mt-3\">\r\n                                <button @click=\"toggleTaskCompletion(task)\"\r\n                                    :class=\"task.completed ? 'btn btn-dark' : 'btn btn-success'\">\r\n                                    <span v-html=\"task.completed ? 'Desmarcar' : 'Completar'\"></span>\r\n                                </button>\r\n                                <button class=\"btn btn-danger\" @click=\"deleteTask(task)\">Eliminar</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<!-- <script> -->\r\n// Esta sección debe permitir agregar tareas nuevas a la vez que extraer las tareas anteriores de la API\r\n<!-- </script> -->\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n    name: \"AddTask\",\r\n    data() {\r\n        return {\r\n            newTask: \"\", // Campo de entrada para la nueva tarea\r\n            tasks: [],   // Lista de tareas locales\r\n        };\r\n    },\r\n    methods: {\r\n        addTask() {\r\n            if (this.newTask.trim() === \"\") return;\r\n\r\n            const newTask = {\r\n                todo: this.newTask,\r\n                completed: false,\r\n                id: Date.now(),\r\n            };\r\n\r\n            // Añadir la nueva tarea al inicio de la lista\r\n            this.tasks.unshift(newTask);\r\n            this.newTask = \"\"; // Limpiar el campo de entrada después de agregar\r\n        },\r\n\r\n        // Elimina una tarea específica de la lista\r\n        deleteTask(task) {\r\n            this.tasks = this.tasks.filter((t) => t.id !== task.id);\r\n        },\r\n\r\n        // Cambia el estado de la tarea entre completada y no completada\r\n        toggleTaskCompletion(task) {\r\n            task.completed = !task.completed;\r\n        },\r\n        fetchTasks() {\r\n            // Aquí deberían realizar la solicitud a la API usando axios o fetch.\r\n            // La URL que usaremos es: https://dummyjson.com/todos\r\n\r\n            // Sugerencia: Intentar implementarlo con axios o fetch\r\n\r\n            axios.get(\"https://dummyjson.com/todos\")\r\n                .then(response => {\r\n                    // Asigna la lista de tareas al estado\r\n                    this.tasks = response.data.todos;\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"Error al obtener las tareas:\", error);\r\n                });\r\n        },\r\n    },\r\n    mounted() {\r\n        this.fetchTasks();\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.add-task-container {\r\n    padding: 20px;\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.input-group {\r\n    display: flex;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.task-input {\r\n    flex-grow: 1;\r\n    padding: 8px;\r\n    margin-right: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n}\r\n\r\n.add-button {\r\n    padding: 8px 12px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    cursor: pointer;\r\n}\r\n\r\n.task-list {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.completed {\r\n    text-decoration: line-through;\r\n    color: gray;\r\n}\r\n</style>"],"mappings":"AAoCA,OAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,QAAA;MACA,SAAAH,OAAA,CAAAI,IAAA;MAEA,MAAAJ,OAAA;QACAK,IAAA,OAAAL,OAAA;QACAM,SAAA;QACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;MACA;;MAEA;MACA,KAAAR,KAAA,CAAAS,OAAA,CAAAV,OAAA;MACA,KAAAA,OAAA;IACA;IAEA;IACAW,WAAAC,IAAA;MACA,KAAAX,KAAA,QAAAA,KAAA,CAAAY,MAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAP,EAAA,KAAAK,IAAA,CAAAL,EAAA;IACA;IAEA;IACAQ,qBAAAH,IAAA;MACAA,IAAA,CAAAN,SAAA,IAAAM,IAAA,CAAAN,SAAA;IACA;IACAU,WAAA;MACA;MACA;;MAEA;;MAEAnB,KAAA,CAAAoB,GAAA,gCACAC,IAAA,CAAAC,QAAA;QACA;QACA,KAAAlB,KAAA,GAAAkB,QAAA,CAAApB,IAAA,CAAAqB,KAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;EACA;EACAE,QAAA;IACA,KAAAR,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}